stages:
  - test
  - deploy

tests:python:
  stage: test
  image: python:3
  services:
    - postgres:9
  variables:
    POSTGRES_DB: zoudb
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: mysecretpassword
    DB_HOST: postgres
    MAIL_DEBUG: 1
  script:
    # Update OS
    - apt update
    - apt install -y python-dev libpq-dev
    - apt install -y -f ffmpeg

    # Install requirements
    - pip install -r requirements.txt

    # Run Tests
    - PYTHONPATH=. py.test
  only:
    - pushes
  except:
    refs:
      - staging
      - master
      - tags
  tags:
    - test

deploy:python:
  stage: deploy
  image: python:3
  before_script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$SSH_PRIVATE_KEY")
    - mkdir -p ~/.ssh
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    - '[[ -f /.dockerenv ]] && echo "$SSH_SERVER_HOSTKEYS" > ~/.ssh/known_hosts'
  script:
    - git clone  --depth 1 --single-branch -b staging http://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.unit.local/devops/ansible-playbooks.git
    - pip install ansible
    - cd ansible-playbooks
    - ansible-playbook -i hosts zou-update-staging.yml
  tags:
    - test
  only:
    - staging@unit-image/zou

deploy:
  stage: deploy
  image: python:3
  before_script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$SSH_PRIVATE_KEY")
    - mkdir -p ~/.ssh
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    - '[[ -f /.dockerenv ]] && echo "$SSH_SERVER_HOSTKEYS" > ~/.ssh/known_hosts'
  script:
    - git clone  --depth 1 --single-branch -b master http://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.unit.local/devops/ansible-playbooks.git
    - pip install ansible
    - cd ansible-playbooks
    - ansible-playbook -i hosts zou-update.yml
  tags:
    - test
  only:
    - master@unit-image/zou
